.PHONEY: all force list_targets run clean

CFLAGS=-Wall
CXXFLAGS=-Wall
ASFLAGS=
RUSTFLAGS=-L.

ASSEMBLER_LANGUAGE=appleasm # x64asm armv7asm aarch64asm
COMPILED_LANGUAGES=c cxx std_rust no_std_rust
TARGET_LANGUAGES=$(ASSEMBLER_LANGUAGE) $(COMPILED_LANGUAGES)
TARGETS=$(foreach FROM,$(TARGET_LANGUAGES),$(foreach TO,$(TARGET_LANGUAGES),$(FROM)2$(TO)))

all: $(TARGETS)

force: clean all

c2c: main_c.o libhello_c.a
	$(CC) $(CFLAGS) $^ -o $@

c2cxx: main_c.o libhello_cxx.a
	$(CC) $(CFLAGS) $^ -o $@

c2armv7asm: main_c.o libhello_armv7asm.a
	$(CC) $(CFLAGS) $^ -o $@

c2appleasm: main_c.o libhello_appleasm.a
	$(CC) $(CFLAGS) $^ -o $@

c2aarch64asm: main_c.o libhello_aarch64asm.a
	$(CC) $(CFLAGS) $^ -o $@

c2x64asm: main_c.o libhello_x64asm.a
	$(CC) $(CFLAGS) $^ -o $@

c2no_std_rust: main_c.o libhello_no_std_rust.a
	$(CC) $(CFLAGS) $^ -o $@

c2std_rust: main_c.o libhello_std_rust.a
	$(CC) $(CFLAGS) $^ -o $@

cxx2c: main_cxx.o libhello_c.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2cxx: main_cxx.o libhello_cxx.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2appleasm: main_cxx.o libhello_appleasm.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2armv7asm: main_cxx.o libhello_armv7asm.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2aarch64asm: main_cxx.o libhello_aarch64asm.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2x64asm: main_cxx.o libhello_x64asm.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2no_std_rust: main_cxx.o libhello_no_std_rust.a
	$(CXX) $(CXXFLAGS) $^ -o $@

cxx2std_rust: main_cxx.o libhello_std_rust.a
	$(CXX) $(CXXFLAGS) $^ -o $@

armv7appleasm: main_armv7asm.o libhello_appleasm.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

armv7asm2c: main_armv7asm.o libhello_c.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

armv7asm2cxx: main_armv7asm.o libhello_cxx.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

armv7asm2armv7asm: main_armv7asm.o libhello_armv7asm.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

armv7asm2no_std_rust: main_armv7asm.o libhello_no_std_rust.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

armv7asm2std_rust: main_armv7asm.o libhello_std_rust.a
	$(CC) -m32 $(CFLAGS) $^ -o $@

appleasm2c: main_appleasm.o libhello_c.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

appleasm2cxx: main_appleasm.o libhello_cxx.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

appleasm2appleasm: main_appleasm.o libhello_appleasm.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

appleasm2no_std_rust: main_appleasm.o libhello_no_std_rust.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

appleasm2std_rust: main_appleasm.o libhello_std_rust.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

aarch64asm2c: main_aarch64asm.o libhello_c.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

aarch64asm2cxx: main_aarch64asm.o libhello_cxx.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

aarch64asm2aarch64asm: main_aarch64asm.o libhello_aarch64asm.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

aarch64asm2no_std_rust: main_aarch64asm.o libhello_no_std_rust.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

aarch64asm2std_rust: main_aarch64asm.o libhello_std_rust.a
	$(CC) -m64 $(CFLAGS) $^ -o $@

x64asm2c: main_x64asm.o libhello_c.a
	$(CC) $(CFLAGS) $^ -o $@

x64asm2cxx: main_x64asm.o libhello_cxx.a
	$(CC) $(CFLAGS) $^ -o $@

x64asm2x64asm: main_x64asm.o libhello_x64asm.a
	$(CC) $(CFLAGS) $^ -o $@

x64asm2no_std_rust: main_x64asm.o libhello_no_std_rust.a
	$(CC) $(CFLAGS) $^ -o $@

x64asm2std_rust: main_x64asm.o libhello_std_rust.a
	$(CC) $(CFLAGS) $^ -o $@

no_std_rust2c: main_no_std.rs libhello_c.a
	cp libhello_c.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2cxx: main_no_std.rs libhello_cxx.a
	cp libhello_cxx.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2appleasm: main_no_std.rs libhello_appleasm.a
	cp libhello_appleasm.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2armv7asm: main_no_std.rs libhello_armv7asm.a
	cp libhello_armv7asm.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2aarch64asm: main_no_std.rs libhello_aarch64asm.a
	cp libhello_aarch64asm.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2x64asm: main_no_std.rs libhello_x64asm.a
	cp libhello_x64asm.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2no_std_rust: main_no_std.rs libhello_no_std_rust.a
	cp libhello_no_std_rust.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

no_std_rust2std_rust: main_2rust_no_std.rs libhello_std.rlib
	rustc $(RUSTFLAGS) $< --extern hello=$(filter-out $<,$^) -o $@

std_rust2c: main_std_rust.a libhello_c.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2cxx: main_std_rust.a libhello_cxx.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2appleasm: main_std_rust.a libhello_appleasm.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2armv7asm: main_std_rust.a libhello_armv7asm.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2aarch64asm: main_std_rust.a libhello_aarch64asm.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2x64asm: main_std_rust.a libhello_x64asm.a
	$(CC) $(CFLAGS) $^ -o $@

std_rust2no_std_rust: main.rs libhello_no_std_rust.a
	cp libhello_no_std_rust.a libhello.a
	rustc $(RUSTFLAGS) $< -o $@

std_rust2std_rust: main_std_rust.a libhello_std_rust.a
	$(CC) $(CFLAGS) $^ -o $@

lib%.a: %.o
	ar rcs $@ $<

lib%_rust.a: %.rs
	rustc --crate-type=staticlib $< -o $@

lib%.rlib: %.rs
	rustc --crate-type=lib $< -o $@

%_c.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%_cxx.o: %.cxx
	$(CXX) $(CXXFLAGS) -c $< -o $@

%_appleasm.o: %.apple.s
	$(CC) -m64 $(CFLAGS) $< -c -o $@

%_armv7asm.o: %.armv7.s
	$(CC) -m32 $(CFLAGS) $< -c -o $@

%_aarch64asm.o: %.aarch64.s
	$(CC) -m64 $(CFLAGS) $< -c -o $@

%_x64asm.o: %.x86_64.s
	$(AS) $(ASFLAGS) $< -o $@

%_rust.a: %.rs
	rustup run nightly rustc --crate-type=staticlib $< -o $@

list_targets:
	echo $(TARGETS)

test: $(TARGETS)
	for cmd in $(TARGETS); do ./$${cmd}; done

run:
	for cmd in $(TARGETS); do ./$${cmd}; done

clean:
	rm -rf *.o *.a *.rlib $(TARGETS)
	rm -rf _no_std_rust2std_rust

